{
	"info": {
		"_postman_id": "c13e298f-b19c-4c30-925c-5015704445c3",
		"name": "NGSI-LD Concise Format",
		"description": "This tutorial introduces the concise **NGSI-LD** format and demonstrates its use and explains the differences between concise and normalized **NGSI-LD** payloads.\n\nThe `docker-compose` file for this tutorial can be found on GitHub:\n\n<img src=\"https://fiware.github.io/tutorials.CRUD-Operations/icon/GitHub-Mark-32px.png\" alt=\"\">\n\n[FIWARE-LD 105: Concise Format](https://github.com/FIWARE/tutorials.Concise-Format)\n\n# NGSI-LD CRUD Operations\n\n> \"To speak much is one thing; to speak to the point another!\"  \n>   \n> — Sophocles, Oedipus at Colonus\n\nThe NGSI-LD API is a flexible mechanism for producing context data in multiple formats. This was demonstrated in the  \ninitial Getting Started [tutorial](https://github.com/FIWARE/tutorials.Getting-Started/tree/NGSI-LD) where both  \n\"normalized\" and \"key-values\" pairs format were produced. The default, verbose data format is so-called \"normalized\"  \nNGSI-LD where every **Property** is defined by `\"type\": \"Property\"` and every **Relationship** is defined by  \n`\"type\": \"Relationship\"`. These keywords ( `type`, `Property` and `Relationship`) are in turn strictly defined JSON-LD  \nterms which can be found in the core @context served with every request.\n\n## NGSI-LD Payloads\n\n### Normalized NGSI-LD\n\nThe full \"normalized\" form is an excellent choice for data exchange, since through the `@context` and the definition  \nof JSON-LD keywords, machines are given all the tools to fully comprehend the payload format. Responses return the  \ncomplete current state of each entity, with payloads all including sub-attributes such as Properties-of-Properties,  \nProperties-of-Relationships and other standard metadata terms like `observedAt` and `unitCode`. Furthermore normalized  \npayloads are exceedingly regular and parseable, and can easily be reduced down to the relevant `value` elements if such  \nan operation necessary. However with the normalized format, is necessary to repeatedly supply common defining attributes  \nsuch as `\"type\": \"Property\"` throughout the payload to ensure that machines can fully understand the data represented.\n\n## NGSI-LD Payloads\n\n### Normalized NGSI-LD\n\nThe full \"normalized\" form is an excellent choice for data exchange, since through the `@context` and the definition  \nof JSON-LD keywords, machines are given all the tools to fully comprehend the payload format. Responses return the  \ncomplete current state of each entity, with payloads all including sub-attributes such as Properties-of-Properties,  \nProperties-of-Relationships and other standard metadata terms like `observedAt` and `unitCode`. Furthermore normalized  \npayloads are exceedingly regular and parseable, and can easily be reduced down to the relevant `value` elements if such  \nan operation necessary. However with the normalized format, is necessary to repeatedly supply common defining attributes  \nsuch as `\"type\": \"Property\"` throughout the payload to ensure that machines can fully understand the data represented.\n\n#### Normalized NGSI-LD using `options=normalized`\n\n``` json\n{\n    \"@context\": [\n        \"https://fiware.github.io/tutorials.Step-by-Step/example.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.4.jsonld\"\n    ],\n    \"id\": \"urn:nsgi-ld:Beatle:John_Lennon\",\n    \"type\": \"Beatle\",\n    \"age\": { \"type\": \"Property\", \"value\": 40, \"unitCode\": \"ANN\" },\n    \"name\": { \"type\": \"Property\", \"value\": \"John Lennon\" },\n    \"born\": { \"type\": \"Property\", \"value\": \"1940-10-09\" },\n    \"spouse\": {\n        \"type\": \"Relationship\",\n        \"object\": \"urn:nsgi-ld:Person:Cynthia_Lennon\"\n    },\n    \"location\": {\n        \"type\": \"GeoProperty\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-73.975, 40.775556]\n        }\n    }\n}\n\n```\n\nOpen in [**JSON-LD Playground**](https://tinyurl.com/4nw9z83m)\n\n### Simplified NGSI-LD\n\nThe use of the normalized format can be contrast with the \"key-values\" pairs format, which is a simplified version  \nconcentrating purely on the values of the first level of attributes only. The payloads remain regular, but are much  \nshorter and to the point, and not all information is returned by the request - second level attributes such as  \n`unitCode` and `observedAt` will not be returned in the payload for example.\n\n#### Simplified NGSI-LD using `options=keyValues`\n\n``` json\n{\n    \"@context\": [\n        \"https://fiware.github.io/tutorials.Step-by-Step/example.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.4.jsonld\"\n    ],\n    \"id\": \"urn:nsgi-ld:Beatle:John_Lennon\",\n    \"name\": \"John Lennon\",\n    \"born\": \"1940-10-09\",\n    \"spouse\": \"urn:nsgi-ld:Person:Cynthia_Lennon\",\n    \"age\": 40,\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-73.975, 40.775556]\n    }\n}\n\n```\n\nOpen in [**JSON-LD Playground**](https://tinyurl.com/2p93h8p6)\n\nThis key-values payload matches the simple JSON-LD payload which can be seen on the front-page of the official  \n[JSON-LD site](https://json-ld.org/).\n\nBoth normalized and key-values NGSI-LD formats are valid JSON-LD, but since the key-values format is lossy, until  \nrecently, all updates to an NGSI-LD context broker must be made using the normalized format.\n\n### Concise NGSI-LD\n\nTo make the API easier to use and reduce the burden on developers, NGSI-LD now accepts an intermediate \"concise\" format  \nwhich still offers all of the context data in the payload, but removes the redundancy of repeatedly adding  \n`\"type\": \"Property\"` throughout each payload. The concise representation is a terser, lossless form of the normalized  \nrepresentation, where redundant \"type\" members are omitted and the following rules are applied:\n\n- Every **Property** without further sub-attributes is represented by the Property value only.\n- Every **Property** that includes further sub-attributes is represented by a value key-value pair.\n- Every **GeoProperty** without further sub-attributes is represented by the GeoProperty’s GeoJSON representation only\n- Every **GeoProperty** that includes further sub-attributes is represented by a value key-value pair.\n- Every **LanguageProperty** is defined by a `languageMap` key-value pair.\n- Every **Relationship** is defined by an `object` key-value pair.\n    \n\n#### Concise NGSI-LD using `options=concise`\n\n``` json\n{\n    \"@context\": [\n        \"https://fiware.github.io/tutorials.Step-by-Step/example.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.4.jsonld\"\n    ],\n    \"id\": \"urn:nsgi-ld:Beatle:John_Lennon\",\n    \"name\": \"John Lennon\",\n    \"born\": \"1940-10-09\",\n    \"spouse\": {\n        \"object\": \"urn:nsgi-ld:Person:Cynthia_Lennon\"\n    },\n    \"age\": { \"value\": 40, \"unitCode\": \"ANN\" },\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-73.975, 40.775556]\n    }\n}\n\n```\n\nOpen in [**JSON-LD Playground**](https://tinyurl.com/32shtpp6)\n\nIt can be seen from the payload above that the concise format (like normalized) is also lossless as it still includes  \nProperties-of-Properties like `unitCode` (the units of the `age` attribute is obviously years following the UN/CEFACT  \ncode `ANN` for example) and also clearly distinguishes between **Properties** and **Relationships** (since  \n**Relationships** always have an `object`).\n\nIn summary, all NGSI-LD formats provide a structured, well-defined payloads, but the \"normalized\" format is verbose and  \nlossless, \"key-values\" is short and lossy, and third format - \"concise\" is a secondary, intermediate lossless format  \ndesigned to bridge the gap between the two.\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy agricultural IoT devices have been created, which will be attached  \nto the context broker. Details of the architecture and protocol used can be found in the  \n[IoT Sensors tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD) The state of each device can be  \nseen on the UltraLight device monitor web page found at: `http://localhost:3000/device/monitor`.\n\n<img src=\"https://fiware.github.io/tutorials.Concise-Format/img/farm-devices.png\" alt=\"\">\n\n<img src=\"https://fiware.github.io/tutorials.Concise-Format/img/history-graphs.png\" alt=\"\">\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container  \ntechnology which allows to different components isolated into their respective environments.\n\n- To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n- To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n- To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n    \n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A  \n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.CRUD-Operations/NGSI-LD/docker-compose/orion-ld.yml) is  \nused configure the required services for the application. This means all container services can be brought up in a  \nsingle command. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux  \nusers will need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should download [cygwin](http://www.cygwin.com/)  \nto provide a command-line functionality similar to a Linux distribution on Windows.\n\n# Architecture\n\nThe demo application will send and receive NGSI-LD calls to a compliant context broker. Since the standardized NGSI-LD  \ninterface is available across multiple context brokers, so we only need to pick one - for example the  \n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/). The application will therefore only make use of  \none FIWARE component.\n\nCurrently, the Orion Context Broker relies on open source [MongoDB](https://www.mongodb.com/) technology to keep  \npersistence of the context data it holds.\n\nTo promote interoperability of data exchange, NGSI-LD context brokers explicitly expose a  \n[JSON-LD `@context` file](https://json-ld.org/spec/latest/json-ld/#the-context) to define the data held within the  \ncontext entities. This defines a unique URI for every entity type and every attribute so that other services outside of  \nthe NGSI domain are able to pick and choose the names of their data structures. Every `@context` file must be available  \non the network. In our case the tutorial application will be used to host a series of static files.\n\nTherefore, the architecture will consist of three elements:\n\n- The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using  \n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n- The underlying [MongoDB](https://www.mongodb.com/) database :\n    - Used by the Orion Context Broker to hold context data information such as data entities, subscriptions and  \n        registrations\n- The **Tutorial Application** does the following:\n    - Offers static `@context` files defining the context entities within the system.\n\nSince all interactions between the three elements are initiated by HTTP requests, the elements can be containerized and  \nrun from exposed ports.\n\n<img src=\"https://fiware.github.io/tutorials.CRUD-Operations/img/architecture-ld.png\" alt=\"\">\n\nThe necessary configuration information can be seen in the services section of the associated `orion-ld.yml` file:\n\n``` yaml\norion:\n    image: fiware/orion-ld\n    hostname: orion\n    container_name: fiware-orion\n    depends_on:\n        - mongo-db\n    networks:\n        - default\n    ports:\n        - \"1026:1026\"\n    command: -dbhost mongo-db -logLevel DEBUG\n    healthcheck:\n        test: curl --fail -s http://orion:1026/version || exit 1\n\n```\n\n``` yaml\nmongo-db:\n    image: mongo:3.6\n    hostname: mongo-db\n    container_name: db-mongo\n    expose:\n        - \"27017\"\n    ports:\n        - \"27017:27017\"\n    networks:\n        - default\n    command: --nojournal\n\n```\n\n``` yaml\ntutorial:\n    image: fiware/tutorials.ngsi-ld\n    hostname: tutorial\n    container_name: fiware-tutorial\n    networks:\n        default:\n            aliases:\n                - context\n    expose:\n        - 3000\n\n```\n\nThe necessary configuration information can be seen in the services section of the associated `docker-compose.yml` file.  \nIt has been described in a [previous tutorial](https://github.com/FIWARE/tutorials.Working-with-At-Context/)\n\n# Start Up\n\nAll services can be initialised from the command-line by running the  \n[services](https://github.com/FIWARE/tutorials.NGSI-LD-Operations/blob/master/services) Bash script provided within the  \nrepository. Please clone the repository and create the necessary images by running the commands as shown:\n\n``` bash\ngit clone https://github.com/FIWARE/tutorials.Concise-Format.git\ncd tutorials.Concise-Format\n./services orion|scorpio\n\n```\n\n> **Note:** If you want to clean up and start over again you can do so with the following command:\n> \n> ```\n> ./services stop\n> \n> ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "179747"
	},
	"item": [
		{
			"name": "Create Operations",
			"item": [
				{
					"name": "Create a New Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:001\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": {\n        \"value\": \"sensor\"\n    },\n    \"temperature\": {\n        \"value\": 25,\n        \"unitCode\": \"CEL\"\n    },\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            13.3505,\n            52.5144\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							]
						},
						"description": "This example adds a new **TemperatureSensor** entity to the context.\n\nNew entities can be added by making a POST request to the `/ngsi-ld/v1/entities` endpoint.\n\nThe request will fail if the entity already exists in the context."
					},
					"response": []
				},
				{
					"name": "Batch Create New Data Entities or Attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n        \"type\": \"TemperatureSensor\",\n        \"category\": [\n            \"sensor\"\n        ],\n        \"temperature\": {\n            \"value\": 20,\n            \"unitCode\": \"CEL\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n        \"type\": \"TemperatureSensor\",\n        \"category\": [\n            \"sensor\",\n            \"actuator\"\n        ],\n        \"temperature\": {\n            \"value\": 2,\n            \"unitCode\": \"CEL\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n        \"type\": \"TemperatureSensor\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n        },\n        \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 100,\n            \"unitCode\": \"CEL\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/create",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"create"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add three new **TemperatureSensor** entities to the\ncontext. Batch create uses the `/ngsi-ld/v1/entityOperations/create` endpoint.\n\nThe request will fail if any of the attributes already exist in the context. The response highlights which actions have\nbeen successful and the reason for failure (if any has occurred)."
					},
					"response": []
				},
				{
					"name": "Batch Create/Overwrite New Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text",
								"name": "Accept"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n        \"type\": \"TemperatureSensor\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n        },\n        \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 21,\n            \"unitCode\": \"CEL\"\n        }\n    },\n    {\n        \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n        \"type\": \"TemperatureSensor\",\n        \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n        },\n        \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 27,\n            \"unitCode\": \"CEL\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/upsert",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"upsert"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add or amend two **TemperatureSensor** entities in the\ncontext.\n\n-   if an entity already exists, the request will update that entity's attributes.\n-   if an entity does not exist, a new entity will be created.\n\nBatch processing for create/overwrite uses the `/ngsi-ld/v1/entityOperations/upsert` endpoint.\n\nA subsequent request containing the same data (i.e. same entities and `actionType=append`) will also succeed won't\nchange the context state. The `modifiedAt` metadata will be amended however."
					},
					"response": []
				}
			],
			"description": "Create Operations map to HTTP POST.\n\n-   The `/ngsi-ld/v1/entities` endpoint is used for creating new entities\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs` endpoint is used for adding new attributes\n\nAny newly created entity must have `id` and `type` attributes and a valid `@context` definition. All other attributes\nare optional and will depend on the system being modelled. If additional attributes are present though, each should\nspecify both a `type` and a `value`.\n\nThe response will be **201 - Created** if the operation is successful or **409 - Conflict** if the operation fails.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Read Operations",
			"item": [
				{
					"name": "Read a Data Entity (normalized)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?options=normalized",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001"
							],
							"query": [
								{
									"key": "options",
									"value": "normalized"
								}
							]
						},
						"description": "This example reads the full context from an existing **TemperatureSensor** entity with a known `id`.\n\nTemperatureSensor `urn:ngsi-ld:TemperatureSensor:001` is returned as _normalized_ NGSI-LD. Additional metadata is\nreturned because `options=sysAttrs`. By default the `@context` is returned in the payload body (although this could be\nmoved due to content negotiation if the `Accept:application/json` had been set.\n\nIndividual context data entities can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/<entity>`\nendpoint."
					},
					"response": []
				},
				{
					"name": "Read an Attribute from a Data Entity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?attrs=temperature&options=concise",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "temperature"
								},
								{
									"key": "options",
									"value": "concise"
								}
							]
						},
						"description": "This example reads the value of a single attribute (`temperature`) from an existing **TemperatureSensor** entity with a\nknown `id`.\n\nThe sensor `urn:ngsi-ld:TemperatureSensor:001` is reading at 25°C.\n\nBecause `options=keyValues` was not used this is the normalized response including the metadata such as `unitCode`.\nContext data can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/<entity-id>` endpoint and selecting\nthe `attrs` using a comma separated list.\n"
					},
					"response": []
				},
				{
					"name": "Read a Data Entity (key value pairs)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/?options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only\n"
								}
							]
						},
						"description": "This example reads the key-value pairs  from the context of an existing **TemperatureSensor** entities with a known `id`.\n\nThe response contains an unfiltered list of context data from an entity containing all of the attributes of the\n`urn:ngsi-ld:TemperatureSensor:001`. The payload body does not contain an `@context` attribute since the\n`Accept: application/json` was set.\n\nCombine the `options=keyValues` parameter with the `attrs` parameter to retrieve a limited set of key-value pairs."
					},
					"response": []
				},
				{
					"name": "Read Multiple attributes values from a Data Entity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/?options=concise&attrs=category,temperature,controlledAsset",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "concise",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "category,temperature,controlledAsset"
								}
							]
						},
						"description": "\nThis example reads the value of two attributes (`category` and `temperature`) from the context of an existing\n**TemperatureSensor** entity with a known ID.\n\nCombine the `options=keyValues` parameter and the `attrs` parameter to return a list of values."
					},
					"response": []
				},
				{
					"name": "List all Data Entities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=TemperatureSensor&options=concise",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor"
								},
								{
									"key": "options",
									"value": "concise"
								}
							]
						},
						"description": "This example lists the full context of all **TemperatureSensor** entities.\n\nOn start-up the context was empty, four **TemperatureSensor** entities have been added by create operations so the full\ncontext will now contain four sensors.\n"
					},
					"response": []
				},
				{
					"name": "List all Data Entities - Filtered",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=TemperatureSensor&options=concise&attrs=temperature,",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor",
									"description": "Entity type"
								},
								{
									"key": "options",
									"value": "concise"
								},
								{
									"key": "attrs",
									"value": "temperature,"
								}
							]
						},
						"description": "This example lists the `temperature` attribute of all **TemperatureSensor** entities.\n\nThe full context contains four sensors, they are returned in a random order.\n\nFull context data for a specified entity type can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/` endpoint\nand supplying the `type` parameter, combine this with the `options=keyValues` parameter and the `attrs` parameter to\nretrieve key-values."
					},
					"response": []
				},
				{
					"name": "List Data Entity by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"name": "Accept"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/?id=urn:ngsi-ld:TemperatureSensor:001,urn:ngsi-ld:TemperatureSensor:002&options=concise&attrs=temperature",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "urn:ngsi-ld:TemperatureSensor:001,urn:ngsi-ld:TemperatureSensor:002"
								},
								{
									"key": "options",
									"value": "concise"
								},
								{
									"key": "attrs",
									"value": "temperature"
								}
							]
						},
						"description": "This example lists selected data from two **TemperatureSensor** entities chosen by `id`. Note that every `id` must be\nunique, so `type` is not required for this request. To filter by `id` add the entries in a comma delimted list.\n\nThe response details the selected attributes from the selected entities."
					},
					"response": []
				}
			],
			"description": "-   The `/ngsi-ld/v1/entities` endpoint is used for listing entities\n-   The `/ngsi-ld/v1/entities/<entity>` endpoint is used for retrieving the details of a single entity.\n\nFor read operations the `@context` must be supplied in a `Link` header.\n\n#### Filtering\n\n-   The `options` parameter (combined with the `attrs` parameter) can be used to filter the returned fields\n-   The `q` parameter can be used to filter the returned entities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update Operations",
			"item": [
				{
					"name": "Overwrite the value of an Attribute value",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": [\"sensor\", \"actuator\"]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs/category",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs",
								"category"
							]
						},
						"description": "This example updates the value of the `category` attribute of the Entity with `id=urn:ngsi-ld:TemperatureSensor:001`\n\nExisting attribute values can be altered by making a PATCH request to the\n`/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint. The appropriate `@context` should be supplied as a `Link`\nheader."
					},
					"response": []
				},
				{
					"name": "Batch Update Attributes of Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"type": "text",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n  },\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n  }\n]"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/upsert?options=update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"upsert"
							],
							"query": [
								{
									"key": "options",
									"value": "update"
								}
							]
						},
						"description": "This example uses the convenience batch processing endpoint to update existing sensors.\n\nBatch processing uses the `/ngsi-ld/v1/entityOperations/upsert` endpoint. The payload body holds an array of the\nentities and attributes we wish to update.The `options=update` parameter indicates we will not remove existing\nattributes if they already exist and have not been included in the payload.\n\nAn alternative would be to use the `/ngsi-ld/v1/entityOperations/update` endpoint. Unlike `upsert`, the `update`\noperation will not silently create any new entities - it fails if the entities do not already exist."
					},
					"response": []
				},
				{
					"name": "Batch Replace Entity Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n    \"type\": \"TemperatureSensor\",\n    \"category\":[\n        \"actuator\",\n        \"sensor\"\n      ]\n  },\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n    \"type\": \"TemperatureSensor\",\n    \"temperature\":  9\n  }\n]"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entityOperations/update?options=replace",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"update"
							],
							"query": [
								{
									"key": "options",
									"value": "replace"
								}
							]
						},
						"description": "This example uses the convenience batch processing endpoint to replace entity data of existing sensors.\n\nBatch processing uses the `/ngsi-ld/v1/entityOperations/update` endpoint with a payload with the - `options=replace`\nparameter, this means we will overwrite existing entities. `/ngsi-ld/v1/entityOperations/upsert` could also be used if\nnew entities are also to be created."
					},
					"response": []
				}
			],
			"description": "Overwrite operations are mapped to HTTP PATCH:\n\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint is used to update an attribute\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs` endpoint is used to update multiple attributes\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "NGSI-LD concise Payload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low feedstock on Farm:001\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"id\": \"urn:ngsi-ld:Animal:pig003\", \"type\": \"Animal\"}],\n  \"notification\": {\n    \"format\": \"concise\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/low-stock-farm001-ngsild\",\n      \"accept\": \"application/geo+json\"\n    }\n  },\n   \"@context\": \"https://fiware.github.io/tutorials.Step-by-Step/data-models-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "This second subscription will fire when the `filling` level is between 0.6 and 0.4. The `format` attribute has been altered to inform the subscriber using NGSI-LD normalized format.\n\n#### Subscription Payload:\n\nWhen a `low-stock-farm001-ngsild` event is fired, the response is as shown:\n\n```json\n{\n \"id\": \"urn:ngsi-ld:Notification:5fd0fa684eb81930c97005f3\",\n \"type\": \"Notification\",\n \"subscriptionId\": \"urn:ngsi-ld:Subscription:5fd0f69b4eb81930c97005db\",\n \"notifiedAt\": \"2020-12-09T16:25:12.193Z\",\n \"data\": [\n  {\n   \"id\": \"urn:ngsi-ld:Device:filling001\",\n   \"type\": \"FillingSensor\",\n   \"filling\": {\n    \"type\": \"Property\",\n    \"value\": 0.25,\n    \"unitCode\": \"C62\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   },\n   \"controllingAsset\": {\n    \"type\": \"Relationship\",\n    \"object\": \"urn:ngsi-ld:Building:farm001\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   }\n  }\n ]\n}\n```\n\nBecause the `accept` attribute has been set to `application/json`, the `@context` is sent as a `Link` header rather than an attribute within the payload body."
					},
					"response": []
				},
				{
					"name": "NGSI-LD concise Payload - GeoJSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of low feedstock on Farm:001\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"id\": \"urn:ngsi-ld:Animal:pig003\", \"type\": \"Animal\"}],\n  \"notification\": {\n    \"format\": \"concise\",\n    \"endpoint\": {\n      \"uri\": \"http://tutorial:3000/subscription/low-stock-farm001-ngsild\",\n      \"accept\": \"application/geo+json\"\n    }\n  },\n   \"@context\": \"https://fiware.github.io/tutorials.Step-by-Step/data-models-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "This second subscription will fire when the `filling` level is between 0.6 and 0.4. The `format` attribute has been altered to inform the subscriber using NGSI-LD normalized format.\n\n#### Subscription Payload:\n\nWhen a `low-stock-farm001-ngsild` event is fired, the response is as shown:\n\n```json\n{\n \"id\": \"urn:ngsi-ld:Notification:5fd0fa684eb81930c97005f3\",\n \"type\": \"Notification\",\n \"subscriptionId\": \"urn:ngsi-ld:Subscription:5fd0f69b4eb81930c97005db\",\n \"notifiedAt\": \"2020-12-09T16:25:12.193Z\",\n \"data\": [\n  {\n   \"id\": \"urn:ngsi-ld:Device:filling001\",\n   \"type\": \"FillingSensor\",\n   \"filling\": {\n    \"type\": \"Property\",\n    \"value\": 0.25,\n    \"unitCode\": \"C62\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   },\n   \"controllingAsset\": {\n    \"type\": \"Relationship\",\n    \"object\": \"urn:ngsi-ld:Building:farm001\",\n    \"observedAt\": \"2020-12-09T16:25:12.000Z\"\n   }\n  }\n ]\n}\n```\n\nBecause the `accept` attribute has been set to `application/json`, the `@context` is sent as a `Link` header rather than an attribute within the payload body."
					},
					"response": []
				}
			],
			"description": "Delete Operations map to HTTP DELETE.\n\n-   The `/ngsi-ld/v1/entities/<entity-id>` endpoint can be used to delete an entity\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint can be used to delete an attribute\n\nThe response will be **204 - No Content** if the operation is successful or **404 - Not Found** if the operation fails.\n\n### Data Relationships\n\nIf there are entities within the context which relate to one another, you must be careful when deleting an entity. You\nwill need to check that no references are left dangling once the entity has been deleted.\n\nOrganizing a cascade of deletions is beyond the scope of this tutorial, but it would be possible using a batch delete\nrequest.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld"
		},
		{
			"key": "json-context.jsonld",
			"value": "http://context/json-context.jsonld"
		},
		{
			"key": "json-context2.jsonld",
			"value": "http://context/alternate-context.jsonld"
		}
	]
}